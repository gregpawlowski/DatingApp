using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using AutoMapper;
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using DatingApp.API.Data;
using DatingApp.API.Dtos;
using DatingApp.API.Helpers;
using DatingApp.API.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;

namespace DatingApp.API.Controllers
{
  [Route("api/users/{userId}/photos")]
  [ApiController]
  public class PhotosController : ControllerBase
  {
    private readonly IDatingRepository _repo;
    private readonly IMapper _mapper;
    private readonly IOptions<CloudinarySettings> _cloudinaryConfig;

    private readonly Cloudinary _cloudinary;

    public PhotosController(
      IDatingRepository repo,
      IMapper mapper,
      IOptions<CloudinarySettings> cloudinaryConfig
    )
    {
      _repo = repo;
      _mapper = mapper;
      _cloudinaryConfig = cloudinaryConfig;

      Account acc = new Account(
        _cloudinaryConfig.Value.CloudName,
        _cloudinaryConfig.Value.APIKey,
        _cloudinaryConfig.Value.APISecret
      );

      _cloudinary = new Cloudinary(acc);
    }

    // The Name will be used to return the route in the CreatedAtRoute ActionResult.
    [HttpGet("{id}", Name = "GetPhoto")]
    public async Task<IActionResult> GetPhoto(int id)
    {
      // Retun the photo from the database, it will include the user details due to the navifation property.
      var photoFromRepo = await _repo.GetPhoto(id);

      var photo = _mapper.Map<PhotoForReturnDto>(photoFromRepo);

      return Ok(photo);
    }

    [HttpPost]
    public async Task<IActionResult> AddPhotoForUser(int userId, [FromForm]PhotoForCreationDto photoForCreationDto)
    {
      // Compare the userID of the token to the one the user is attempting to upload to
      if (userId != int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value))
        return Unauthorized();

      var file = photoForCreationDto.File;

      // This will be used to store the result from cloudinary
      var uploadResult = new ImageUploadResult();

      if (file.Length > 0)
      {
        // Because this is a file stream we ahve to use using.
        // File.OpenReadStream will open a stream to read the file into memory
        using (var stream = file.OpenReadStream())
        {
          // Create params for uploading the photo to Cloudinary
          var uploadParam = new ImageUploadParams()
          {
            // pass in the file anem and the stream of data
            File = new FileDescription(file.Name, stream),
            // transfomr the file in case it too long
            Transformation = new Transformation().Width(500).Height(500).Crop("fill").Gravity("face")
          };

          // Upload the actual photo.
          uploadResult = _cloudinary.Upload(uploadParam);
        }
      }

      // Now that we've uploaded the photo we can get the URL and the PublicID of the photo and add it in to our photoForCreationDto
      photoForCreationDto.Url = uploadResult.Uri.ToString();
      photoForCreationDto.PublicId = uploadResult.PublicId;

      // Map the photoForCreation we recieved into a Photo object for uploading to database.
      var photo = _mapper.Map<Photo>(photoForCreationDto);

      // Get ther user becuaes we will need to use the user info.
      var userFromRepo = await _repo.GetUser(userId, true);

      // Check if the user has a main photo already, if they don't, set this new photo to be their main photo.
      if (!userFromRepo.Photos.Any(u => u.IsMain))
      {
        photo.IsMain = true;
      }

      userFromRepo.Photos.Add(photo);


      if (await _repo.SaveAll())
      {
        // Now that the save is successfull our photo will have an ID generated by SQL.
        var photoToReturn = _mapper.Map<PhotoForReturnDto>(photo);

        return CreatedAtRoute("GetPhoto", new { userId = userId, id = photo.Id }, photoToReturn);
      }

      return BadRequest("Could not add the photo");
    }

		[HttpPost("{id}/setMain")]
		public async Task<IActionResult> SetMainPhoto(int userId, int id) 
		{
			// Compare the userID of the token to the one the user is attempting to upload to
      if (userId != int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value))
        return Unauthorized();

			var user = await _repo.GetUser(userId, true);

			// Check if user acutally has this photo ID in their collection. If not return unauthorized.
			if (!user.Photos.Any(p => p.Id == id))
				return Unauthorized();

			// Get the current photo.
			var photoFromRepo = await _repo.GetPhoto(id);

			// if the photo is already the main photo then return bad request.
			if (photoFromRepo.IsMain)
				return BadRequest("This is already the main photo");
			
			// Get teh current main photo and set it to false and set the new photo to main.
			var currentPhoto = await _repo.GetMainPhotoForUser(userId);
			currentPhoto.IsMain = false;
			photoFromRepo.IsMain = true;

			if (await _repo.SaveAll())  {
				return NoContent();
			}

			return BadRequest("Could not set photo to main");
		}

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeletePhoto(int userId, int id) 
    {
      // Check to make sure use ID matches with the token so that user is only deleting one how their photos.
      if (userId != int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value))
        return Unauthorized();

      var userFromRepo = await _repo.GetUser(userId, true);

      // Check to make sure the photo they are deleting is in the user's Photos.
      if (!userFromRepo.Photos.Any(p => p.Id == id))
        return Unauthorized();
      
      var photoFromRepo = await _repo.GetPhoto(id);

      if (photoFromRepo.IsMain)
        return BadRequest("Cannot delete main photo!");

      // If it's a photo from Cloudinary
      if (photoFromRepo.PublicId != null) 
      {
        // Delete photo from Cloudinary
        var deleteParams = new DeletionParams(photoFromRepo.PublicId);
        var result = _cloudinary.Destroy(deleteParams);

        if (result.Result == "ok") {
        // Delete photo from database/repo
          _repo.Delete(photoFromRepo);
        }

      }
      // If photo is not form cloudinary but is from default loaded
      if (photoFromRepo.PublicId == null) 
      {
        _repo.Delete(photoFromRepo);
      }

      if (await _repo.SaveAll())
        return Ok();
      
      return BadRequest("Failed to delete the photo");
    }
  }
}